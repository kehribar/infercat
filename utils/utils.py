# -----------------------------------------------------------------------------
#
#
# -----------------------------------------------------------------------------
import re
import infercat
import numpy as np

# -----------------------------------------------------------------------------
def printSeperator(fp):
  fp.write("// ")
  for i in range(0, 77): fp.write("-")
  fp.write("\r\n")

# -----------------------------------------------------------------------------
def printHeader(fp, modelname):
  printSeperator(fp)
  fp.write("// \r\n")
  fp.write("// This file is auto generated by model_export.py\r\n")
  printSeperator(fp)
  fp.write("#ifndef %s\r\n" % modelname.upper())
  fp.write("#define %s\r\n" % modelname.upper())
  fp.write("\r\n")
  fp.write("// ....\r\n");
  fp.write("#include <stdint.h>\r\n")
  fp.write("#include \"infercat.h\"\r\n");

# -----------------------------------------------------------------------------
def printFooter(fp):
  fp.write("\r\n")
  printSeperator(fp)
  fp.write("#endif\r\n")

# -----------------------------------------------------------------------------
def printArrayContents(fp, name, data):
  fp.write("\r\n");
  fp.write("// ...\r\n");
  fp.write("static const float %s[%d] = {\r\n  " % (name, len(data)))
  for ind, x in enumerate(data):
    if(ind == (len(data) - 1)):
      fp.write("%12.9f\r\n" % x)
      fp.write("};\r\n");
    else:
      fp.write("%12.9f, " % x)
      if((ind % 5) == 4):
        fp.write("\r\n  ")

# -----------------------------------------------------------------------------
def printOutputBuffer(fp, name, length):
  fp.write("\r\n")
  printSeperator(fp)
  fp.write("//\r\n");
  printSeperator(fp)
  fp.write("\r\n")
  fp.write("// ...\r\n");
  fp.write("float %s[%d];\r\n  " % (name, length))

# -----------------------------------------------------------------------------
# Taken from rnnoise project.
def tf_getLayerActivationName(layer):
  return re.search('function (.*) at', str(layer.activation)).group(1).upper()

# -----------------------------------------------------------------------------
def exportCustomLayersToFile(fp, modelname, layer_list):
  
  # ...
  printHeader(fp, modelname)
  
  # ...
  for layer in layer_list:

    # -------------------------------------------------------------------------
    if(isinstance(layer, infercat.Dense)):

      # ...
      sh = layer.output_shape
      outputBufferSize = sh[0]
      printOutputBuffer(fp, layer.name + "_output", outputBufferSize)

      # ...
      printArrayContents(fp, layer.name + "_weights", layer.flatWeights())
      printArrayContents(fp, layer.name + "_biases", layer.biases)

      # ...
      fp.write("\r\n")
      fp.write("// ...\r\n")
      fp.write("const InfercatLayer_DENSE %s_ = {\r\n" % layer.name)
      fp.write("  .weight = %s_weights,\r\n" % layer.name)  
      fp.write("  .bias = %s_biases,\r\n" % layer.name)  
      fp.write("  .input_size = %d,\r\n" % layer.input_shape[0])
      fp.write("  .output_size = %d,\r\n" % layer.output_shape[0])
      fp.write("  .output_buffer = %s_output,\r\n" % layer.name)
      fp.write("  .activation = InfercatLayerActivation_%s\r\n" % layer.activation)
      fp.write("};\r\n")

      # ...
      fp.write("\r\n")
      fp.write("// ...\r\n")
      fp.write("const InfercatLayer %s = {\r\n" % layer.name)
      fp.write("  .mem = (void*)(&%s_),\r\n" % layer.name)
      fp.write("  .type = InfercatLayerType_DENSE\r\n")
      fp.write("};\r\n")

    # -------------------------------------------------------------------------
    elif(isinstance(layer, infercat.Conv2D)):

      # ...
      sh = layer.output_shape
      outputBufferSize = sh[0] * sh[1] * sh[2]
      printOutputBuffer(fp, layer.name + "_output", outputBufferSize)

      # ...
      printArrayContents(fp, layer.name + "_weights", layer.flatWeights())
      printArrayContents(fp, layer.name + "_biases", layer.biases)

      # ...
      fp.write("\r\n")
      fp.write("// ...\r\n")
      fp.write("const InfercatLayer_CONV2D %s_ = {\r\n" % layer.name)
      fp.write("  .weight = %s_weights,\r\n" % layer.name)  
      fp.write("  .bias = %s_biases,\r\n" % layer.name)  
      fp.write("  .in_width = %d,\r\n" % layer.input_shape[0])
      fp.write("  .in_height = %d,\r\n" % layer.input_shape[1])
      fp.write("  .in_depth = %d,\r\n" % layer.input_shape[2])
      fp.write("  .out_width = %d,\r\n" % layer.output_shape[0])
      fp.write("  .out_height = %d,\r\n" % layer.output_shape[1])
      fp.write("  .out_depth = %d,\r\n" % layer.output_shape[2])
      fp.write("  .kernel_width = %d,\r\n" % layer.kernel_shape[0])
      fp.write("  .stride = %d,\r\n" % layer.stride[0])
      fp.write("  .output_buffer = %s_output,\r\n" % layer.name)
      fp.write("  .activation = InfercatLayerActivation_%s\r\n" % layer.activation)
      fp.write("};\r\n")

      # ...
      fp.write("\r\n")
      fp.write("// ...\r\n")
      fp.write("const InfercatLayer %s = {\r\n" % layer.name)
      fp.write("  .mem = (void*)(&%s_),\r\n" % layer.name)
      fp.write("  .type = InfercatLayerType_CONV2D\r\n")
      fp.write("};\r\n")

    # -------------------------------------------------------------------------
    elif(isinstance(layer, infercat.MaxPooling2D)):

      # ...
      sh = layer.output_shape
      outputBufferSize = sh[0] * sh[1] * sh[2]
      printOutputBuffer(fp, layer.name + "_output", outputBufferSize)

      # ...
      fp.write("\r\n")
      fp.write("// ...\r\n")
      fp.write("const InfercatLayer_MAXPOOLING2D %s_ = {\r\n" % layer.name)
      fp.write("  .in_width = %d,\r\n" % layer.input_shape[0])
      fp.write("  .in_height = %d,\r\n" % layer.input_shape[1])
      fp.write("  .in_depth = %d,\r\n" % layer.input_shape[2])
      fp.write("  .out_width = %d,\r\n" % layer.output_shape[0])
      fp.write("  .out_height = %d,\r\n" % layer.output_shape[1])
      fp.write("  .out_depth = %d,\r\n" % layer.output_shape[2])
      fp.write("  .pool_width = %d,\r\n" % layer.pool_shape[0])
      fp.write("  .stride = %d,\r\n" % layer.stride[0])
      fp.write("  .output_buffer = %s_output,\r\n" % layer.name)
      fp.write("};\r\n")

      # ...
      fp.write("\r\n")
      fp.write("// ...\r\n")
      fp.write("const InfercatLayer %s = {\r\n" % layer.name)
      fp.write("  .mem = (void*)(&%s_),\r\n" % layer.name)
      fp.write("  .type = InfercatLayerType_MAXPOOLING2D\r\n")
      fp.write("};\r\n")

  # ...
  fp.write("\r\n")
  printSeperator(fp)
  fp.write("//\r\n");
  printSeperator(fp)
  fp.write("\r\n")
  fp.write("// ...\r\n")
  fp.write("#define %s_LAYERCOUNT %d\r\n" % 
    (modelname, len(layer_list))
  )

  # ...
  fp.write("\r\n")
  fp.write("// ...\r\n")
  fp.write("const InfercatLayer* %s[%d] = {\r\n  " % 
    (modelname, len(layer_list))
  )
  for x in range(0, len(layer_list)):
    name = layer_list[x].name
    if(x == (len(layer_list) - 1)):
      fp.write("&%s\r\n" % name)
      fp.write("};\r\n")
    else:
      fp.write("&%s,\r\n  " % name)

  # ...
  printFooter(fp)
